// Mocks generated by Mockito 5.0.9 from annotations
// in emotion_chat/test/repositories/user_repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:emotion_chat/data/enums/connection_status.dart' as _i9;
import 'package:emotion_chat/data/models/auth/user.dart' as _i2;
import 'package:emotion_chat/data/models/auth/user_props.dart' as _i5;
import 'package:emotion_chat/repositories/image_picker/i_image_picker_repository.dart'
    as _i7;
import 'package:emotion_chat/services/auth/i_auth_service.dart' as _i3;
import 'package:emotion_chat/services/image_upload/i_image_service.dart' as _i6;
import 'package:emotion_chat/services/network/i_network_service.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeMyUser extends _i1.Fake implements _i2.MyUser {}

/// A class which mocks [IAuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAuthService extends _i1.Mock implements _i3.IAuthService {
  MockIAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i2.MyUser> get currentUser =>
      (super.noSuchMethod(Invocation.getter(#currentUser),
          returnValue: Stream<_i2.MyUser>.empty()) as _i4.Stream<_i2.MyUser>);
  @override
  _i4.Future<_i2.MyUser> signUpWithEmailAndPhone(
          {_i5.EmailAddress? emailAddress,
          _i5.PhoneNumber? phoneNumber,
          _i5.Password? password}) =>
      (super.noSuchMethod(
              Invocation.method(#signUpWithEmailAndPhone, [], {
                #emailAddress: emailAddress,
                #phoneNumber: phoneNumber,
                #password: password
              }),
              returnValue: Future<_i2.MyUser>.value(_FakeMyUser()))
          as _i4.Future<_i2.MyUser>);
  @override
  _i4.Future<_i2.MyUser> signInWithEmail(
          {_i5.EmailAddress? emailAddress, _i5.Password? password}) =>
      (super.noSuchMethod(
              Invocation.method(#signInWithEmail, [],
                  {#emailAddress: emailAddress, #password: password}),
              returnValue: Future<_i2.MyUser>.value(_FakeMyUser()))
          as _i4.Future<_i2.MyUser>);
  @override
  _i4.Future<_i2.MyUser> signInWithPhoneNumber(
          {_i5.PhoneNumber? phoneNumber, _i5.Password? password}) =>
      (super.noSuchMethod(
              Invocation.method(#signInWithPhoneNumber, [],
                  {#phoneNumber: phoneNumber, #password: password}),
              returnValue: Future<_i2.MyUser>.value(_FakeMyUser()))
          as _i4.Future<_i2.MyUser>);
  @override
  _i4.Future<_i2.MyUser> getSignedInUser() =>
      (super.noSuchMethod(Invocation.method(#getSignedInUser, []),
              returnValue: Future<_i2.MyUser>.value(_FakeMyUser()))
          as _i4.Future<_i2.MyUser>);
  @override
  _i4.Future<void> addInfoAboutUserToStream(_i2.MyUser? user) =>
      (super.noSuchMethod(Invocation.method(#addInfoAboutUserToStream, [user]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
}

/// A class which mocks [IImageUploadService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIImageUploadService extends _i1.Mock
    implements _i6.IImageUploadService {
  MockIImageUploadService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> uploadProfileImage(
          {_i7.MyPickedFile? profileImage, String? uid}) =>
      (super.noSuchMethod(
          Invocation.method(#uploadProfileImage, [],
              {#profileImage: profileImage, #uid: uid}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
  @override
  _i4.Future<String> getProfileImageUrl({String? uid}) => (super.noSuchMethod(
      Invocation.method(#getProfileImageUrl, [], {#uid: uid}),
      returnValue: Future<String>.value('')) as _i4.Future<String>);
}

/// A class which mocks [INetworkService].
///
/// See the documentation for Mockito's code generation for more information.
class MockINetworkService extends _i1.Mock implements _i8.INetworkService {
  MockINetworkService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Stream<_i9.ConnectionStatus> get onNetworkStatusChange =>
      (super.noSuchMethod(Invocation.getter(#onNetworkStatusChange),
              returnValue: Stream<_i9.ConnectionStatus>.empty())
          as _i4.Stream<_i9.ConnectionStatus>);
}
